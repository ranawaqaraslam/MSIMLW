// Define the area of interest for Keenjhar Lake, Sindh, Pakistan
var aoi = ee.Geometry.Rectangle([67.90, 24.8, 68.2, 25.1]);

// Define the time range for 2020
var startDate = '2020-01-01';
var endDate = '2020-12-31';

// Import Landsat 8 Surface Reflectance collection
var landsat = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterBounds(aoi)
  .filterDate(startDate, endDate)
  .filter(ee.Filter.lt('CLOUD_COVER', 20)); // Filter clouds

// Function to scale the surface reflectance bands
function scaleImage(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true);
}

// Function to calculate LST
function addLST(image) {
  // Get thermal band
  var thermal = image.select('ST_B10').multiply(0.00341802).add(149.0);
  
  // Calculate LST
  var lst = thermal.subtract(273.15).rename('LST');
  
  return image.addBands(lst);
}

// Function to calculate all indices
function addIndices(image) {
  var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
  var evi = image.expression(
    '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
      'NIR': image.select('SR_B5'),
      'RED': image.select('SR_B4'),
      'BLUE': image.select('SR_B2')
    }).rename('EVI');
  var ndbi = image.normalizedDifference(['SR_B6', 'SR_B5']).rename('NDBI');
  var ndmi = image.normalizedDifference(['SR_B5', 'SR_B6']).rename('NDMI');
  var ndsi = image.normalizedDifference(['SR_B3', 'SR_B6']).rename('NDSI');
  var smi = image.normalizedDifference(['SR_B6', 'SR_B5']).rename('SMI');
  var ndwi = image.normalizedDifference(['SR_B3', 'SR_B5']).rename('NDWI');
  var mndwi = image.normalizedDifference(['SR_B3', 'SR_B6']).rename('MNDWI');
  
  return image.addBands(ndvi).addBands(evi).addBands(ndbi).addBands(ndmi)
              .addBands(ndsi).addBands(smi).addBands(ndwi).addBands(mndwi);
}

// Apply scaling, LST calculation, and index calculations
var processedCollection = landsat.map(scaleImage).map(addLST).map(addIndices);

// Calculate the median of all bands and indices for the year
var medianImage = processedCollection.select(['SR_B.*', 'LST', 'NDVI', 'EVI', 'NDBI', 'NDMI', 'NDSI', 'SMI', 'NDWI', 'MNDWI']).median();

// Import Global Surface Water data for wetland mask
var gsw = ee.Image('JRC/GSW1_3/GlobalSurfaceWater');
var occurrence = gsw.select('occurrence');
var wetlandMask = occurrence.gt(25).rename('wetland'); // Assume areas with water >25% of the time are wetlands

// Create training data
var trainingData = medianImage.addBands(wetlandMask).sample({
  region: aoi,
  scale: 30,
  numPixels: 5000,
  seed: 123
});

// Split the data into training and validation sets
var split = 0.7;  // 70% for training, 30% for validation
var training = trainingData.randomColumn('random').filter(ee.Filter.lt('random', split));
var validation = trainingData.randomColumn('random').filter(ee.Filter.gte('random', split));

// Train a Random Forest classifier
var classifier = ee.Classifier.smileRandomForest(100)
  .train({
    features: training,
    classProperty: 'wetland',
    inputProperties: ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'LST', 'NDVI', 'EVI', 'NDBI', 'NDMI', 'NDSI', 'SMI', 'NDWI', 'MNDWI']
  });

// Classify the image
var classified = medianImage.classify(classifier);

// Validate the model
var validationResults = validation.classify(classifier);
var accuracy = validationResults.errorMatrix('wetland', 'classification');
print('Validation accuracy:', accuracy.accuracy());

// Display the results
Map.centerObject(aoi, 10);
Map.addLayer(ee.Image().paint(aoi, 0, 2), {}, 'AOI');
Map.addLayer(classified.clip(aoi), {min: 0, max: 1, palette: ['gray', 'blue']}, 'Wetland Classification');

// Export the classification result
Export.image.toDrive({
  image: classified,
  description: 'Wetland_Classification_Keenjhar_Lake_2020',
  scale: 30,
  region: aoi,
  maxPixels: 1e13
});